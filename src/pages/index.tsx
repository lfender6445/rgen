import { useState, useReducer, ReactNode } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'

const inter = Inter({ subsets: ['latin'] })

const options = [{
  template: {
    name: "Portfolio",
    components: [
      'Portfolio',
      'Bar',
      'Baz'
    ],
  }
}
]


const initialState = {}

const ASK_FOR_CLIENT_NAME = 'ASK_FOR_CLIENT_NAME' as const
const UPDATE_DEPENDENCIES = 'UPDATE_DEPENDENCIES' as const

const DataDependencyReducer = (state: any = initialState, action: { type: string, instructions?: string, dependency?: { key: string, value: any } }) => {
  switch (action.type) {
    case UPDATE_DEPENDENCIES:
      if (action.dependency) {
        const { key, value } = action.dependency
        state.dependencies[key] = value
        return state
      }
    case ASK_FOR_CLIENT_NAME:
      return { ...state, instructions: action.instructions }
    default:
      return state
  }
}

const Portfolio = ({ dependencies, dispatch }: any) => {
  // This component has a 'dataDependency' on  portfoioIds (which we obtain by asking for the client name)
  const action = { type: 'UPDATE_CONTROL_PANEL', instructions: ASK_FOR_CLIENT_NAME }

  if (dependencies.portfolioId) {
    return <p>Portfolio Component Rendered</p>
  } else {
    dispatch(action)
    return null
  }
}

const ComponentMapping = {
  'Portfolio': Portfolio,
} as Record<string, any>

const mockGraphqlFetchTemplateData = (_selection: string) => {
  const { template } = options[0]
  return template
}


interface MetaData {
  portfolioId?: string,
  securityId?: string
}

const Report = ({ template, dependencies, dispatch }: { template: any, dependencies: MetaData, dispatch: any }) => {
  const Elements = (template.components || []).map(
    (name: string) => {
      return () => {
        const Wrapper = ComponentMapping[name]
        if (Wrapper) {
          return <Wrapper dependencies={dependencies} dispatch={dispatch} />

        }
        return null
      }
    })

  return <>
    {Elements.map(
      (E: any) => <E depencies={dependencies} dispatch={dispatch} />)
    }
  </>

}

const mockFetchGQLClientPortfolio = (_clientName: string) => {
  const mockResponse = { portfolioId: '12345' }
  return mockResponse
}

const DataDependencies = ({ instructions, dispatch }: { instructions: string[], dispatch: any }) => {
  const handleSubmitClient = () => {
    const { portfolioId } = mockFetchGQLClientPortfolio('John Smith')
    dispatch({ UPDATE_DEPENDENCIES, dependency: { key: 'portfolioId', value: portfolioId } })
  }

  if (instructions.includes(ASK_FOR_CLIENT_NAME)) {
    return <>
      <label>Please enter client name so we can fetch portfolio data</label>
      <input name="client-search-autocomplete" type="text" />
      <button type="submit" onSubmit={handleSubmitClient}>Fetch Client Data</button>
    </>
  } else {
    return null
  }
}

const ControlPanel = () => {

  const [template, setTemplate] = useState({ template: {} } as any)

  const [state, dispatch] = useReducer(DataDependencyReducer, initialState)

  const handleChange = (e: any) => {
    const selection = e.target.value
    const myTemplate = mockGraphqlFetchTemplateData(selection)
    setTemplate(myTemplate)
  }


  return <>
    <form>
      <label>Choose a template</label>
      <select name="templates" onChange={handleChange}>
        {
          options.map(
            (option) => <option value={option.template.name}>{option.template.name}</option>
          )}
      </select>
    </form>

    <DataDependencies instructions={state.instructions || []} dispatch={dispatch} />

    <Report dependencies={state.deps} template={template} dispatch={dispatch} />
  </>
}

export default function Home() {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <ControlPanel />
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>src/pages/index.tsx</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              By{' '}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
            </a>
          </div>
        </div>

        <div className={styles.center}>
          <Image
            className={styles.logo}
            src="/next.svg"
            alt="Next.js Logo"
            width={180}
            height={37}
            priority
          />
        </div>

        <div className={styles.grid}>
          <a
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Docs <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Find in-depth information about Next.js features and&nbsp;API.
            </p>
          </a>

          <a
            href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Learn <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Learn about Next.js in an interactive course with&nbsp;quizzes!
            </p>
          </a>

          <a
            href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Templates <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Discover and deploy boilerplate example Next.js&nbsp;projects.
            </p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Deploy <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Instantly deploy your Next.js site to a shareable URL
              with&nbsp;Vercel.
            </p>
          </a>
        </div>
      </main>
    </>
  )
}
